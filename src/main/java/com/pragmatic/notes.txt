У чому різниця між list<Object> та Object[], детально
інкапсуляція
розібрати equals та hashvalue


Дописати репозиторії і оновлення файлу в них
Продумати, які дії мені прописувати, що може змінювати в тих даних, які я ввожу

Для чого робити новий екземпляр експешена.
Які бувають ексепшени . Catchable / uncathable
Перевод валют продумати, де його б брати

•	A method that adds a user.
UserRepo -> createUser
•	A method that adds an account.
AccountRepo -> createAccount
•	A method that transfers funds from one account to another.
AccountService -> MoneyTransfer. Дописав логування в аккаунт файл.
•	A method that outputs a list of users to the console.
UserRepo
•	A method that outputs the data of a specific user to the console.
User
•	A method that displays the accounts of a specific user in the console.
User
•	A method that displays an account statement for a certain period.
TODO перевірити чи існує і чи працює.

•	All these methods should be covered by unit tests.



1.	Java Syntax
2.	Comparison of objects in java. Like: !=, ==, >, <, >=, <=, equals(), hashCode(), comparators.
3.	Collections knowledge (Medium knowledge required: must know which collection is sortable and which is not, and which collection is used for which purposes)
4.	Exceptions (What kind of exceptions are used in java. Exception hierarchy)
5.	Practical application of the principles of OOP. Inheritance, polymorphism and encapsulation
6.	Input/Output stream – it is commonly used in Java. It can be called an interface between the foreign world and Java application.



Не міг додати нормально депенденсі, не вантажилось, знайшов звідки йшло.
Розібрати детальніше дебаггер як працює в ідеї
що таке restcontoller advice
коментарі на укр мові ( хоткі)

Альтернатива для @Size анотації буде min та для


22.8.24
Розібратись по видам бінів ( скоупи точніше)
РОзповісти за депенденсі інжекшен паттерн
Апплікейшен контекст ( клас) прочитати та показати як його використовувати, і чим він відрізняється від підходу з анотаціями.
Через апп контекст напис код який отримає бін зі скоупом сінгл тон, і бін зі скоупом протототайп.

Концепция Dependency Injection состоит в том, чтобы перенести ответственность за создание экземпляра объекта из тела метода за пределы класса и
передать уже созданный экземпляр объекта обратно. Вот и все!
https://topjava.ru/blog/back-to-basics-dependency-injection


27.08.2024
Створити бін з залежністю від бінів ( бін н1 має в собі зберігати змінну з значенням біна н2)
Підключити до проєкту ломбок,
У всіх контролерах додати анотацію лог4ж2, розповісти що вона робить,
в цих же контроллерах додати логування після кожного рядка бізнес логіки. Тільки всередині метода контроллера.
Для цього хмл файл потрібен.  Знайти конфігурацію, поки не розбиратись детально.
В контроллер додати анотацію •	AllArgsConstructor, і зробити так щоб всі біни інжектились через цей контруктор. Розказати за цю анотацію, що вона робить.

28.08
Написати тести для репозиторія та сервіса.
Подивитись інтеграційні тести ( в чому різниця між інт та юніт тестами)

02.09
Юніт тести на репозиторій, на сервіс.
ПОчитати  equals and hashcode як порівнюються об'єкти, база база.
Ы пояснити чого воно не має працювати або неправильно працювало. Зробити так, щоб правильно працювало.
Всюди де в мене аккаунти порівнюються.

Розыбрати приклад, відносно помилки в тестах, що у мене були. Як це працює? Бо жпт каже що такий код просто не скомпілюється
@Test
    void getRepoList() {} {
        Account acc1 = accountRepositoryImpl.createAccount(1,1);
        Account acc2 = accountRepositoryImpl.createAccount(2,1);
        List<Account> accountList = Arrays.asList(acc1,acc2);
        Assertions.assertEquals(accountList, accountRepositoryImpl.getRepoList());
    }

Перевірити чи ок написаний пост метод.
 ? що означаэ аннотацыя @Validated всередині маппінга, в плані параметрів які він приймає на методі
 Що таке былдер, як вони його використовують щоб створювати об'єкти, замість set {return this}



коди помилок вивчити прямо, той список що Міша казав
Докер
Створити докер композ файл з базою даних постгрес
Підключити до проєкту залежності мавен для роботи з постгресом
Дві залежності постгрес драйвер ждбс та 	spring-boot-starter-data-jpa

Моя задача щоб сервіс підключився до бд без помилок.
docker compose тільки для постгреса.

./idea.sh
setxkbmap -layout "us,ru,ua" -option "grp:alt_shift_toggle" &


13.9.2024
liquidbase прилыпити якось

all tables migration + structure + repo + model review
sequence generator add to liquibase

references move to another query, not on create table stage.
check how references work

jdbc template check and make the same.


dao для селекта з бази даних.
під кожен репо - свій дао.
задача - класти до бд, та виймати з бд.

створюю через дто, а віддаю через account, який якраз і створюється тільки тоді, коли його потрібно з бази віддати.
Репозиторій в цьмоу випадку це не репозиторій, а прослойка між базою та між джавою.

Записати щоб додаток повністю працював через базу даних, без мапінга, без ніяких додаткових методів в дао, які не будуть використовуватись.

Уточнити, чи правильно оформлений транзакшен репо, в особливості пошук даних по юзеру.

//    TODO convertation logic should be moved to separate class
//    MODEL TO DTO AND BACK
//    окремий клас, який приймаэ дто і вертає модель, і навпаки
//    придумати назву пакета та покласти туди
контроллер щоб виконував задачы, що поставлені на нього
я створив акк і почав перекидати бабки і т.д.
в скл по пошуку транзакцій поправити все, мапінг змінних, загалом по скл файлах переробити

usebigdecimal for balance (currency calculation)
speadminservice request access, check spoke tests how they are made ( check only for repositories). Try to use it in project
Use spock in spring boot app (google it)
check todo
що буде вертатись на ексепшен ( кверя до бази)


1.Чому нема датасорса на підключення до тестів. (що таке підняти контекст в рамках інт тестів розібрати)
2. З профілями ясно. Не ясно як у нього створюються таблиці, де це робиться? (пошукати)
3.Чому ждбс темплейт виходить нул.
4. Чому коли імпортую інтерфейс даошки - теж нул.
5/ контейнери
розыбрати primary анотації

поправити скл груп. чистити квері, і нуспішні тести так само промутити
поправити прайвет для екзек квері
допиисати тести для всіх дао
зробити щоб груві тести пускались через мавен команду
розібратись відносно ресурсів.

треба пояснити цю частину
 private boolean execUpdateQuery(SqlQuery sqlQuery)  {
        return Objects.requireNonNull(getNamedParameterJdbcTemplate()).update(sqlQuery.getQuery(), sqlQuery.getParams()) > 0;
    }


ще це. Чому я не тестую на інші якісь речі, інші типи даних. що можуть влетіти
1) Обмеження класу. Просто він і раніше не прийме даних, бо всі методи ріівня вище обробляють тільки дані, які відносяться до мого типу даних, заданих в класі.
2) Сама ідея до коду
 public boolean updateBalance(BigDecimal balance, Long accountId) {
        if (!(accountId instanceof Long)) {
            throw new IllegalArgumentException("AccountId must be of type Long");
        }
  Пише що такі перевірки надлишкові. Пропонує просто замінити на нулл.

  на якому рівні валідація має відбуватись?  і до якого доходити.

  ексепшен зі спрінга

  format code ( cmd, option, l)\


  наскільки детальною має бути умова ексепшена по стрінзі? Наприклад.
  нулл, і пуста стрінга ок. А чи повинна бути перевірка на трім, далі порівняти її довжину і кинути ексепшен, якщо 0?
  яке неуспішне флоу до сейва? Він або збереже або ні. І нічого інше туди не влетить окрім його класу.
  як імпортувати статичні параметри легко, не вручну. На прикладі екзекушен метода.
    блок ексепшенів з датою, як краще б зробити було
    чому юзерімпл 98 відсотків, де помилка
    загальне значення дто порівняно з реквестом. Вона юзається тільки щоб вертати дані до контроллера, щоб не повертати оригінальний клас?

    !!різниця депенденсі менеджемент і депенденсіс. Як їх можна поєднувати?


    Стрінгютілз.ізбланк, переевірка на нал і на пусту строку.
    відносно імпорта - погратись з настройками в ідеї, як статику імпортувати.

    покрити кейс 102 лінія по юзердао.


    UserCreateRequest => UserCreateRequestDto переписати
    успішні та неіспішні кейси на груві для контроллера.


 ХІКАРІ ррозібрати. Спробувати налаштування примінити
1.взнати по замовчуванню яка кількість конекшенів з базою даних в спрінгбут 3 та спрінгбут 2.
2. Як змінити.
3. Які практики по підбору кількості средпул конекшенів існують, який розмір оптимальний.
4. це буде почитати про основні налаштування хікарі.

https://dip-mazumder.medium.com/how-to-determine-java-thread-pool-size-a-comprehensive-guide-4f73a4758273#:~:text=Determining%20the%20Number%20of%20Threads%20for%20CPU%2DBound%20Tasks%3A&text=Let's%20say%20you%20have%208,other%20tasks%20and%20system%20processes.
Pool size = ((Core count * (1 + (Wait time / Service time))))

https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing#connections--core_count--2--effective_spindle_count

connections = ((core_count * 2) + effective_spindle_count)

defaults:
sb3:
Pool Size:
spring.datasource.hikari.maximum-pool-size: By default, the maximum size of the connection pool is set to 10.
2. Connection Timeout:

spring.datasource.hikari.connection-timeout: By default, the timeout for acquiring a connection from the pool is set to 30 seconds.
3. Idle Timeout:

spring.datasource.hikari.idle-timeout: By default, the timeout for idle connections in the pool is set to 10 minutes.
4. Connection Validation:

spring.datasource.hikari.validation-timeout: By default, the timeout for connection validation is set to 5 seconds.
spring.datasource.hikari.connection-test-query: By default, a simple SQL query is used to validate connections (SELECT 1).
5. Other Settings:

spring.datasource.hikari.minimum-idle: By default, the minimum number of idle connections in the pool is set to 10% of the maximum pool size.
spring.datasource.hikari.max-lifetime: By default, the maximum lifetime of a connection in the pool is set to 30 minutes.
spring.datasource.hikari.initialization-fail-timeout: By default, the maximum time in milliseconds that HikariCP will wait for a connection pool to initialize is set to 1 minute

sp2: defaults
allowPoolSuspension.............false
autoCommit......................true
catalog.........................none
connectionInitSql...............none
connectionTestQuery.............none
connectionTimeout...............30000
dataSource......................none
dataSourceClassName.............none
dataSourceJNDI..................none
driverClassName................."com.mysql.cj.jdbc.Driver"
exceptionOverrideClassName......none
idleTimeout.....................600000
jdbcUrl.........................jdbc:mysql://<server>:<port>/<db>
maxLifetime.....................1800000
maximumPoolSize.................10
metricRegistry..................none
minimumIdle.....................10




@Configuration
public class DataSourceConfig {

    @Primary
    @Bean("mainDataSource")
    @ConfigurationProperties(prefix = "datasource.admin")
    public HikariDataSource mainDataSource() {
        return DataSourceBuilder.create().type(HikariDataSource.class).build();
    }

    @Bean("quartzDataSource")
    @ConfigurationProperties(prefix = "datasource.quartz")
    public HikariDataSource quartzDataSource() {
        HikariDataSource ds = DataSourceBuilder.create().type(HikariDataSource.class).build();
        ds.setPoolName("quartz");
        return ds;
    }

    @Bean("eventJournalDataSource")
    @ConfigurationProperties(prefix = "datasource.eventjournal")
    public HikariDataSource eventJournalDataSource() {
        HikariDataSource ds = DataSourceBuilder.create().type(HikariDataSource.class).build();
        ds.setPoolName("eventJournal");
        return ds;
    }